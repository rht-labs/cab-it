pipeline {

    agent {
        label "master"
    }

    environment {
        // Global Vars
        CI_CD_NAMESPACE = "cab-it-ci-cd"
        DEV_NAMESPACE = "cab-it-dev"
        TEST_NAMESPACE = "cab-it-test"

        APP_NAME = "python-app"
        APPLY_PLAYBOOK_NAME = "apply.yml"
        SOURCE_CONTEXT_DIR = "" // probably not needed

        JENKINS_TAG = "${JOB_NAME}.${BUILD_NUMBER}".replace("/", "-")

        NEXUS_SERVICE_HOST = 'nexus'
        NEXUS_SERVICE_PORT = '8081'

        OCP_API_SERVER = "${OPENSHIFT_API_URL}"
        OCP_TOKEN = readFile('/var/run/secrets/kubernetes.io/serviceaccount/token').trim()


    }

    options {
        buildDiscarder(logRotator(numToKeepStr:'10'))
        timeout(time: 15, unit: 'MINUTES')
        ansiColor('xterm')
        timestamps()
    }

    stages {
/* to be added back later when testing is working
        stage("Test and Build") {
            agent {
                node {
                    label "jenkins-slave-python"  
                }
            }
            steps {
                sh '''
                    cd app/app/
                    pwd
                    ls -al
                    python -m virtualenv env
                    source env/bin/activate
                    pip install -r requirements.txt
                '''
            }
        }
*/
        stage("Bake Image") {
            steps {
                script{
                    def helper = load 'app/shared-library.groovy'
                    helper.patchBuildConfigOutputLabels(env)

                    openshift.withCluster () {
                        def buildSelector = openshift.startBuild( "${APP_NAME}" )
                        buildSelector.logs('-f')
                    }
                }
            }
        }
 
        stage('Deploy: Dev'){
            agent { label 'jenkins-slave-ansible'}
            steps {
                script{
                    def helper = load 'app/shared-library.groovy'
                    // helper.applyAnsibleInventory( "${APPLY_PLAYBOOK_NAME}", 'dev' ) get rid of apply_playbook_name or default it
                    timeout(5) { // in minutes
                        openshift.loglevel(3)
                        helper.promoteImageWithinCluster( "${APP_NAME}", "${CI_CD_NAMESPACE}", "${DEV_NAMESPACE}", "${JENKINS_TAG}" )
                        helper.verifyDeployment("${APP_NAME}", "${DEV_NAMESPACE}")
                    }
                }
            }
        }

        stage('Deploy: Test'){
            agent { label 'jenkins-slave-ansible'}
            options {
                timeout(time: 1, unit: 'HOURS')
            }
            steps {
                script {
                    // slackSend "${env.APP_NAME} Input requested - ${JOB_NAME} ${BUILD_NUMBER} (<${BUILD_URL}|Open>)"
                    input message: 'Deploy to Test?'

                }
                script{
                    def helper = load 'app/shared-library.groovy'
                    // helper.applyAnsibleInventory( "${APPLY_PLAYBOOK_NAME}", 'test' )
                    timeout(10) { // in minutes
                        helper.promoteImageWithinCluster( "${APP_NAME}", "${CI_CD_NAMESPACE}", "${TEST_NAMESPACE}", "${JENKINS_TAG}" )
                        // the new client is having random failures
                        helper.verifyDeployment("${APP_NAME}", "${TEST_NAMESPACE}")
                    }
                }

                // slackSend color: "good", message: ":success: ${APP_NAME} Build Completed - ${JOB_NAME} ${BUILD_NUMBER} (<${BUILD_URL}|Open>)"

            }
        }
    }
}